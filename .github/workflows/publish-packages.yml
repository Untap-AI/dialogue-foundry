name: Deploy Packages to S3

on:
  push:
    branches:
      - main
    paths:
      - 'apps/**'
      - 'packages/**'
      - '.github/workflows/publish-packages.yml'
  pull_request:
    types: [closed]
    branches:
      - main
    paths:
      - 'apps/**'
      - 'packages/**'
      - '.github/workflows/publish-packages.yml'
  
  # Allow manual triggering
  workflow_dispatch:

jobs:
  build_and_deploy:
    name: Build and Deploy
    # Run on: manual trigger, PR merge to main, or direct push to main
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main')
    runs-on: ubuntu-latest
    
    permissions:
      packages: write
      contents: read
    
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Needed for Turborepo to detect changes
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@peytonhobson'
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false
      
      - name: Install dependencies
        run: pnpm install
      
      - name: Install ts-node globally
        run: pnpm install -g ts-node typescript
      
      - name: Build all packages
        run: |
          echo "Building all packages..."
          pnpm build
      
      - name: Deploy packages
        id: deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Running publish-package scripts..."
          
          # Create an array to track failures
          declare -a failed_packages
          
          # Find all packages with publish-package script
          for pkg in $(find apps packages -name "package.json" -not -path "*/node_modules/*" -not -path "*/dist/*" | sort); do
            if grep -q '"publish-package":' "$pkg"; then
              dir=$(dirname "$pkg")
              name=$(node -p "require('./$pkg').name")
              echo "Publishing $name from $dir..."
              
              # Run the publish-package script and capture exit code
              cd $dir
              pnpm run publish-package
              exit_code=$?
              cd - > /dev/null
              
              if [ $exit_code -ne 0 ]; then
                failed_packages+=("$name")
                echo "::warning::Failed to publish $name"
              else
                echo "Successfully published $name"
              fi
            fi
          done
          
          # Report failures but don't fail the workflow
          if [ ${#failed_packages[@]} -ne 0 ]; then
            echo "::warning::The following packages failed to publish: ${failed_packages[*]}"
            echo "Continuing with deployment summary..."
          fi
      
      - name: Create deployment summary
        run: |
          echo "## ðŸ“¦ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Package | Version | Status |" >> $GITHUB_STEP_SUMMARY
          echo "| ------- | ------- | ------ |" >> $GITHUB_STEP_SUMMARY
          
          # We'll list the packages that have the publish-package script
          for pkg in $(find apps packages -name "package.json" -not -path "*/node_modules/*" -not -path "*/dist/*" | sort); do
            if grep -q '"publish-package":' "$pkg"; then
              dir=$(dirname "$pkg")
              name=$(node -p "require('./$pkg').name")
              version=$(node -p "require('./$pkg').version")
              echo "| $name | $version | âœ… |" >> $GITHUB_STEP_SUMMARY
            fi
          done
